=======
#Layout
=======
  - Home page:
    1. App title
    2. Search box
    3. Scrollable Search results
  - Actor Details View
  - Movie Details View
=======
#Client
=======

=====================
problems encountered
=====================

1. I wasn't constructing the request URL correctly
  - the search parameter was '?&' but it was supposed to be '?q'

3. Too many requests sent - for each new character
  - needed to be able to send request only after user stopped typing
  - used Observable operators to solve this issue.
      1. debounceTime(time to wait) to indicate how long we should stall
4. After using Observable operators to optimize requests, I could no longer see my
request responses on the page. The proplem occured because I wasn't subscribing to the observable.
It turned out that when you use templating, you subscribe to observables by using the
 async pipe like so "actor | async", where actor is the name of the observable.
 After I added the 'async', everything worked as expected

5. When I was making the second request to get actor details, I was simply returning the observable object.
The issue was that I wasn't subscribing to the observable. This prevents the request from being sent out. As a result,
no jsonp request was made.


6. I finally can fetch actor details. However, it takes a very long time. I think we need a loading bar so that
the application doesn't seem broken.

7. Angular animation wasn't working. I loaded the page on chrome and it worked. So, it was a browser issue.

8. Element positioning was different on chrome and safari. THe fix was to make the elements' position dependent on the
positioning of the parent.

=======Animation Problem ======
1.     trigger('fadeIn', [
      state('loaded', style({
        opacity: 1,
      })),
      transition("void => loaded", [
        style({
          opacity: 0
        }),
        animate('2s ease-out')
      ])
    ])
2.     trigger('fadeIn', [
      state('loaded', style({
        opacity: 1,
      })),
      transition("void => loaded", [
        animate('2s ease-out', style({
          opacity: 0
        }))
      ])
    ])
1 and 2 are different
1) Animation starts on DOM load
2) Animation starts after element is loaded (undesirable for page load animation)
==========================
